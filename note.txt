sys.argv 기본 규칙: 명령줄 인자(Command Line Arguments)

sys.argv는 파이썬 실행 시 전달된 모든 인자들을 리스트로 담음

항상 맨 앞(sys.argv[0])에는 실행된 스크립트의 파일 이름이 자동으로 들어가요.

python crawl.py 자동차 보험

["crawl.py", "자동차", "보험"]

sys.argv[0] → "crawl.py" (실행한 파일 이름)

sys.argv[1] → "자동차" (첫 번째 사용자 입력)

sys.argv[2] → "보험" (두 번째 사용자 입력)



---------------------------------------------------------------------

sys.argv == ["crawl.py"]
len(sys.argv) == 1

if len(sys.argv) < 2:
    print(json.dumps({"error": "Usage: python crawl.py <keyword>"}))


sys.argv == ["crawl.py" , "자동차"]

len(sys.argv) == 2

  else:
        keyword = sys.argv[1]
        result = crawl_related_keywords(keyword)
        # ✅ 여기서 JSON으로 출력
        print(json.dumps(result, ensure_ascii=False, indent=2))


---------------------------------------------------------------


base_dir = os.path.dirname(os.path.abspath(__file__))
json_path = os.path.join(base_dir, "related_keywords.json")


__file__ → 현재 실행 중인 파이썬 파일 경로 (crawl\api\crawl.py)

abspath(__file__) → 그걸 절대 경로로 변환 (D:\project\crawl\api\crawl.py)

dirname(...) → 파일 이름을 떼고 폴더만 가져옴 (D:\project\crawl\api)

os.path.join(..., "related_keywords.json") 
→ 그 폴더 아래에 "related_keywords.json" 경로 생성 (D:\project\crawl\api\related_keywords.json)


------------------------------------------------------------------

 "type": "module"
 모듈 시스템이 ESM(ECMAScript Module) 으로 바뀝니다
 .js 확장자 파일도 import / export 문법을 바로 쓸 수 있어요.

import cron from "node-cron";
import { exec } from "child_process";
import path from "path";

이렇게 사용가능 

아니면 CommonJS 방식
const cron = require("node-cron");
const { exec } = require("child_process");
const path = require("path");


이렇게 해야 함.


-----------------------------------------------------------

[item.text.strip() for item in items if item.text.strip()]

1. for item in items 반복 시작
2. if item.text.strip() 조건 검사 : .strip() 텍스트를 공백 제거한 결과가 빈 문자열이 아닐 때만 true
3. item.text.strip(): 최종적으로리스트에 넣을값  값 리스트에 추가됨

if "":              # False
    print("실행X")

if "   ".strip():   # "   " → "" → False
    print("실행X")

related_keywords = []
for item in items:                      # 1. items에서 요소 하나씩 꺼냄
    text = item.text.strip()            # 2. 텍스트 가져와 공백 제거
    if text:                            # 3. 빈 문자열이 아니면
        related_keywords.append(text)   # 4. 리스트에 추가


-----------------------------------------------------------------------

* * * * * *
┬ ┬ ┬ ┬ ┬ ┬
│ │ │ │ │ └─ 초(Seconds) [선택적, node-cron에서는 지원]
│ │ │ │ └─── 요일 (0 - 7) (0 = 일요일, 7 = 일요일)
│ │ │ └───── 월 (1 - 12)
│ │ └─────── 일 (1 - 31)
│ └───────── 시 (0 - 23)
└─────────── 분 (0 - 59)


-----------------------------------------------------------------------

1. Python (crawl.py)

네이버에서 관련 검색어 크롤링 → 'list[str]' 반환

stdout 출력

{ keyword, related } '객체' 형태로 변환해 터미널로 전달

2. Next.js API (route.ts)

related_keywords.json 파일 읽기 (배열 구조)

배열에서 .find()로 keyword에 맞는 객체 하나 추출

API 응답

NextResponse.json(found) → 항상 객체 응답

3. 프론트 (page.tsx)

const data = await res.json(); → 객체 수신

setResults(data.related) → 배열 렌더링








